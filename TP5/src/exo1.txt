1.  Qu'oserve-t-on lors de l'exécution de ce programme ?

Nous pouvons observer que les nombres sont tous écartés de 4 octets. En exécutant le
programme plusieurs fois, nous pouvons remarquer que la zone mémoire est différente
à chaque fois mais que l'écart entre les nombres reste toujours identiques.

2.  Illustrez sous forme d’un schéma (plan mémoire) similaire à celui de la Figure 1
    la représentation en mémoire du tableau « t ».

int t[N] = {10, 20, 30, 40, 50};

Adresses              Mémoire     
                 ----------------
 0  i       ---> |      10      |
 1  i+4     ---> |      20      |
 2  i+8     ---> |      30      |
 3  i+12    ---> |      40      |
 4  i+16    ---> |      50      |
                 ----------------

3.  Compilez et exécutez plusieurs fois ce programme en remplaçant dans la déclaration
    du tableau « t » le type « int » par « short int », « float », « double ». Que peut-
    on en déduire sur le format de stockage des types de données mentionnés ?

int : 4 octets
short int : 2 octets
float : 4 octets
double : 8 octets

Selon le type stocké, la place prise en mémoire est plus ou moins grande.
Pour optimiser la mémoire, il est intéressant d'utiliser des types adaptés aux besoins.

4.  Écrire le programme suivant et expliquer à l’aide d’un schéma son fonctionnement et
    sa représentation mémoire.

0xADRESSE_1 = *px   -> 0xADRESSE_2    [?]
                    -> 0xADRESSE_2+1  [?]
                    -> 0xADRESSE_2+2  [?]
                    -> 0xADRESSE_2+3  [?]

px est un pointeur qui pointe vers la première case du zone mémoire de 4 octets car nous 
avons déclaré un malloc de la taille d'un int.
Ensuite on dit que la valeur pointé par le pointeur px vaut 1


0xADRESSE_1 = *px   -> 0xADRESSE_2    [WWWW WWWW]    \
                    -> 0xADRESSE_2+1  [XXXX XXXX]    |_  Représentation du nombre 1 en binaire
                    -> 0xADRESSE_2+2  [YYYY YYYY]    |
                    -> 0xADRESSE_2+3  [ZZZZ ZZZZ]    /